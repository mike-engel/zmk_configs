/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <1 10>;
            layers = <0 4>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <13 22>;
            layers = <0 4>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <25 34>;
            layers = <0 4>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <4 7>;
            layers = <0 4>;
        };

        underscore {
            bindings = <&kp LS(MINUS)>;
            key-positions = <28 31>;
            layers = <0 4>;
        };
    };

    behaviors {
        left_hand_positional_hold_tap: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HAND_POSITIONAL_HOLD_TAP";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "tap-unless-interrupted";
            quick-tap-ms = <100>;
            hold-trigger-key-positions = <6 18 30 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 39 40 41 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };
        right_hand_positional_hold_tap: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HAND_POSITIONAL_HOLD_TAP";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <100>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 36 37 38 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q                                          &kp W                                      &kp E                                      &kp R                                        &kp T                                                    &kp Y                                                    &kp U                                          &kp I                                        &kp O                                        &kp P                                                    &none
&none  &left_hand_positional_hold_tap LEFT_CONTROL A  &left_hand_positional_hold_tap LEFT_ALT S  &left_hand_positional_hold_tap LEFT_GUI D  &left_hand_positional_hold_tap LEFT_SHIFT F  &left_hand_positional_hold_tap LS(LA(LC(LEFT_GUI))) G    &right_hand_positional_hold_tap RS(RA(RC(RIGHT_GUI))) H  &right_hand_positional_hold_tap RIGHT_SHIFT J  &right_hand_positional_hold_tap RIGHT_GUI K  &right_hand_positional_hold_tap RIGHT_ALT L  &right_hand_positional_hold_tap RIGHT_CONTROL SEMICOLON  &none
&none  &kp Z                                          &kp X                                      &kp C                                      &kp V                                        &kp B                                                    &kp N                                                    &kp M                                          &kp COMMA                                    &kp DOT                                      &kp FSLH                                                 &none
                                                                                                 &kp TAB                                    &mo 2                                        &mo 1                                                    &lt 3 BACKSPACE                                          &kp SPACE                                      &kp ENTER
            >;
        };

        programming {
            bindings = <
&none  &sys_reset  &bt BT_NXT   &bt BT_PRV     &bt BT_CLR  &none    &none           &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &kp LS(NUMBER_9)  &kp LS(NUMBER_0)  &none
&none  &tog 4      &kp PAGE_UP  &kp PAGE_DOWN  &kp END     &none    &kp LEFT_ARROW  &kp UP_ARROW          &kp DOWN_ARROW         &kp RIGHT_ARROW   &none             &none
&none  &none       &none        &none          &none       &none    &none           &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LS(COMMA)     &kp LS(PERIOD)    &none
                                &none          &none       &none    &kp BACKSPACE   &kp SPACE             &kp ENTER
            >;
        };

        numbers {
            bindings = <
&none  &none  &none  &none  &none  &none    &kp COMMA      &kp N7     &kp N8     &kp N9  &kp BACKSLASH     &none
&none  &none  &none  &none  &none  &none    &kp DOT        &kp N4     &kp N5     &kp N6  &kp SINGLE_QUOTE  &none
&none  &none  &none  &none  &none  &none    &kp N0         &kp N1     &kp N2     &kp N3  &kp EQUAL         &none
                     &none  &none  &none    &kp BACKSPACE  &kp SPACE  &kp ENTER
            >;
        };

        symbols {
            bindings = <
&none  &none                 &none             &kp LS(NUMBER_8)  &kp LS(NUMBER_7)  &none                &none  &none  &none  &none  &none  &none
&none  &kp LS(SINGLE_QUOTE)  &kp LS(NUMBER_6)  &kp LS(N5)        &kp LS(NUMBER_4)  &kp LS(EQUAL)        &none  &none  &none  &none  &none  &none
&none  &kp LS(GRAVE)         &kp LS(NUMBER_3)  &kp LS(NUMBER_2)  &kp LS(NUMBER_1)  &kp LS(BACKSLASH)    &none  &none  &none  &none  &none  &none
                                               &kp TAB           &none             &none                &none  &none  &none
            >;
        };

        gaming {
            bindings = <
&none  &kp Q  &kp W  &kp E    &kp R  &kp T    &kp Y            &kp U      &kp I      &kp O    &kp P     &none
&none  &kp A  &kp S  &kp D    &kp F  &kp G    &kp H            &kp J      &kp K      &kp L    &kp SEMI  &none
&none  &kp Z  &kp X  &kp C    &kp V  &kp B    &kp N            &kp M      &kp COMMA  &kp DOT  &kp FSLH  &none
                     &kp TAB  &mo 2  &mo 1    &lt 3 BACKSPACE  &kp SPACE  &kp ENTER
            >;
        };
    };
};
